import telebot
from telebot import types
import config
import database
import os
import schedule
import time
import logging
import pandas as pd  
from threading import Thread
from cachetools import TTLCache

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(filename="bot.log", 
                    level=logging.INFO, 
                    format="%(asctime)s - %(levelname)s - %(message)s", 
                    encoding='utf-8')  

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
database.create_tables()

# –ü–∞–ø–∫–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
UPLOAD_FOLDER = config.UPLOAD_FOLDER
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

# –ö–µ—à—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –¥–ª—è —à–≤–∏–¥—à–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
user_cache = TTLCache(maxsize=1000, ttl=600)  

@bot.message_handler(commands=['start'])
def start_registration(message):
    user_id = message.from_user.id

    if user_id in user_cache or database.is_user_registered(user_id):
        user_cache[user_id] = True  
        send_main_menu(message.chat.id)
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    else:
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton('üÜï –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', callback_data='register')
        markup.add(button)
        bot.send_message(message.chat.id, "üë§ **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó**", reply_markup=markup, parse_mode='Markdown')
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")

def send_active_requests_reminder():
    active_requests = database.get_all_active_requests()
    if active_requests:
        messages = []
        for req in active_requests:
            messages.append(
                f"üìå **–ó–∞–ø–∏—Ç ‚Ññ{req['request_number']}**\n"
                f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {req['name']} (–¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']})\n"
                f"üí∞ **–°—É–º–∞:** {req['amount']} {req['currency']}\n"
                f"üñã **–ö–æ–º–µ–Ω—Ç–∞—Ä:** {req['comment']}\n"
                f"üìé **–§–∞–π–ª:** {'–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ' if req['file_path'] else '–§–∞–π–ª –Ω–µ –¥–æ–¥–∞–Ω–æ.'}\n"
                f"üìÖ **–°—Ç–∞—Ç—É—Å:** {req['status']}"
            )
        bot.send_message(config.ADMIN_CHAT_ID, "üîî **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞—è–≤–∫–∏**:\n\n" + "\n\n".join(messages), parse_mode='Markdown')
        logging.info("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    else:
        bot.send_message(config.ADMIN_CHAT_ID, "üîî **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è**: –ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫.", parse_mode='Markdown')
        logging.info("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞—è–≤–æ–∫")

def schedule_reminders():
    schedule.every().day.at("11:00").do(send_active_requests_reminder)
    schedule.every().day.at("12:00").do(send_active_requests_reminder)
    schedule.every().day.at("13:00").do(send_active_requests_reminder)
    schedule.every().day.at("14:00").do(send_active_requests_reminder)
    schedule.every().day.at("15:00").do(send_active_requests_reminder)
    schedule.every().day.at("16:00").do(send_active_requests_reminder)
    schedule.every().day.at("17:00").do(send_active_requests_reminder)
    schedule.every().day.at("17:30").do(send_active_requests_reminder)

    while True:
        schedule.run_pending()
        time.sleep(1)

def run_scheduler():
    scheduler_thread = Thread(target=schedule_reminders)
    scheduler_thread.start()
    logging.info("–ó–∞–ø—É—â–µ–Ω–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")

@bot.callback_query_handler(func=lambda call: call.data == 'register')
def process_registration(call):
    user_id = call.from_user.id

    if user_id in user_cache or database.is_user_registered(user_id):
        user_cache[user_id] = True
        bot.send_message(call.message.chat.id, "‚úÖ **–í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!**", parse_mode='Markdown')
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
    else:
        bot.send_message(call.from_user.id, "‚úèÔ∏è **–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:**", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, get_name)
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—á–∞–≤ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é")

def get_name(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(message.chat.id, "üì± **–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:**", parse_mode='Markdown')
    bot.register_next_step_handler(message, get_phone, name)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ —ñ–º'—è: {name}")

def get_phone(message, name):
    phone = message.text
    bot.send_message(message.chat.id, "üèô **–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:**", parse_mode='Markdown')
    bot.register_next_step_handler(message, get_city, name, phone)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")

def get_city(message, name, phone):
    city = message.text
    user_id = message.from_user.id

    database.add_user(user_id, name, phone, city)
    user_cache[user_id] = True  # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫–µ—à—É

    bot.send_message(message.chat.id, "üéâ **–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!**", parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ú—ñ—Å—Ç–æ: {city}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    send_main_menu(message.chat.id)

def send_main_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    button_request = types.InlineKeyboardButton('üìù –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç', callback_data='make_request')
    button_status = types.InlineKeyboardButton('üîç –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å', callback_data='check_status')
    button_export = types.InlineKeyboardButton('üìä –ï–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏', callback_data='export_requests')
    markup.add(button_request, button_status, button_export)
    bot.send_message(chat_id, "üîî **–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:**", reply_markup=markup, parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

@bot.callback_query_handler(func=lambda call: call.data == 'export_requests')
def export_requests(call):
    user_id = call.from_user.id
    if user_id in config.ADMIN_NAMES:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ Excel
        file_path = database.export_requests_to_excel()
        with open(file_path, 'rb') as file:
            bot.send_document(user_id, file)
        logging.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞–≤ –∑–∞–ø–∏—Ç–∏ –≤ Excel")
    else:
        bot.send_message(call.message.chat.id, "‚õîÔ∏è –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –∑–∞–ø–∏—Ç—ñ–≤.")
        logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –±–µ–∑ –ø—Ä–∞–≤")

@bot.callback_query_handler(func=lambda call: call.data == 'make_request')
def choose_currency(call):
    markup = types.InlineKeyboardMarkup()
    button_usd = types.InlineKeyboardButton('üíµ USD', callback_data='currency_usd')
    button_eur = types.InlineKeyboardButton('üí∂ EUR', callback_data='currency_eur')
    button_uah = types.InlineKeyboardButton('üí¥ UAH', callback_data='currency_uah')
    markup.add(button_usd, button_eur, button_uah)
    bot.send_message(call.message.chat.id, "üí∞ **–û–±–µ—Ä—ñ—Ç—å –≤–∞–ª—é—Ç—É:**", reply_markup=markup, parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {call.message.chat.id} –∑–∞–ø—Ä–æ–ø–æ–Ω–æ–≤–∞–Ω–æ –≤–∏–±—ñ—Ä –≤–∞–ª—é—Ç–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith('currency_'))
def process_currency(call):
    currency = call.data.split('_')[1].upper()
    bot.send_message(call.message.chat.id, f"ü§ë **–í–∏ –æ–±—Ä–∞–ª–∏ {currency}. –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å —Å—É–º—É:**", parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {call.message.chat.id} –æ–±—Ä–∞–≤ –≤–∞–ª—é—Ç—É: {currency}")
    bot.register_next_step_handler(call.message, process_amount, currency)

def process_amount(message, currency):
    amount = message.text
    if not amount.isdigit():
        bot.send_message(message.chat.id, "‚ùóÔ∏è **–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–∏.**", parse_mode='Markdown')
        logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É: {amount}")
        bot.register_next_step_handler(message, process_amount, currency)
        return

    bot.send_message(message.chat.id, "üñã **–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä:**", parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ —Å—É–º—É: {amount} {currency}")
    bot.register_next_step_handler(message, process_comment, currency, amount)

def process_comment(message, currency, amount):
    comment = message.text

    markup = types.InlineKeyboardMarkup()
    skip_button = types.InlineKeyboardButton('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data=f'skip_file|{currency}|{amount}|{comment}')
    markup.add(skip_button)

    bot.send_message(message.chat.id, "üìé **–¢–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ PDF-—Ñ–∞–π–ª. –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫.**", reply_markup=markup, parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –¥–æ–¥–∞–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä: {comment}")
    bot.register_next_step_handler(message, process_file, currency, amount, comment)

@bot.callback_query_handler(func=lambda call: call.data.startswith('skip_file'))
def skip_file(call):
    try:
        _, currency, amount, comment = call.data.split('|')
        user_id = call.from_user.id

        request_id, request_number = database.add_request(user_id, currency, amount, comment, None)

        user_info = database.get_user_info(user_id)
        request_text = (f"üÜï **–ó–∞–ø–∏—Ç ‚Ññ{request_number}** –≤—ñ–¥ {user_info['name']}, {user_info['city']} (üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}):\n"
                        f"üí∞ **–°—É–º–∞:** {amount} {currency}\n"
                        f"üñã **–ö–æ–º–µ–Ω—Ç–∞—Ä:** {comment}\n"
                        f"üìé **–§–∞–π–ª:** –§–∞–π–ª –Ω–µ –¥–æ–¥–∞–Ω–æ.")
        request_message = bot.send_message(config.ADMIN_CHAT_ID, request_text, parse_mode='Markdown')

        markup = types.InlineKeyboardMarkup()
        approve_button = types.InlineKeyboardButton('‚úÖ –ü–æ–≥–æ–¥–∏—Ç–∏', callback_data=f'approve_{request_id}')
        reject_button = types.InlineKeyboardButton('‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data=f'reject_{request_id}')
        markup.add(approve_button, reject_button)

        bot.edit_message_reply_markup(config.ADMIN_CHAT_ID, request_message.message_id, reply_markup=markup)
        bot.send_message(call.message.chat.id, f"üì© **–í–∞—à –∑–∞–ø–∏—Ç ‚Ññ{request_number}: {amount} {currency}. –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–∏–π –Ω–∞ —Ä–æ–∑–≥–ª—è–¥ –±–µ–∑ —Ñ–∞–π–ª—É.**", parse_mode='Markdown')
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å—Ç–≤–æ—Ä–∏–≤ –∑–∞–ø–∏—Ç ‚Ññ{request_number} –Ω–∞ —Å—É–º—É {amount} {currency} –±–µ–∑ —Ñ–∞–π–ª—É")
    except Exception as e:
        bot.send_message(call.message.chat.id, "‚ùóÔ∏è **–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫—É —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.**")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—Ä–æ–ø—É—Å–∫—É —Ñ–∞–π–ª—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {call.from_user.id}: {str(e)}")

def process_file(message, currency, amount, comment):
    try:
        file_path = None
        user_id = message.from_user.id

        if message.content_type == 'photo':
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            file_path = os.path.join(UPLOAD_FOLDER, file_info.file_unique_id + '.jpg')
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
        elif message.content_type == 'document' and message.document.mime_type == 'application/pdf':
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            file_path = os.path.join(UPLOAD_FOLDER, message.document.file_name)
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)

        request_id, request_number = database.add_request(user_id, currency, amount, comment, file_path)

        user_info = database.get_user_info(user_id)
        request_text = (f"üÜï **–ó–∞–ø–∏—Ç ‚Ññ{request_number}** –≤—ñ–¥ {user_info['name']}, {user_info['city']} (üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}):\n"
                        f"üí∞ **–°—É–º–∞:** {amount} {currency}\n"
                        f"üñã **–ö–æ–º–µ–Ω—Ç–∞—Ä:** {comment}\n"
                        f"üìé **–§–∞–π–ª:** {'–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ' if file_path else '–§–∞–π–ª –Ω–µ –¥–æ–¥–∞–Ω–æ.'}")
        request_message = bot.send_message(config.ADMIN_CHAT_ID, request_text, parse_mode='Markdown')

        markup = types.InlineKeyboardMarkup()
        approve_button = types.InlineKeyboardButton('‚úÖ –ü–æ–≥–æ–¥–∏—Ç–∏', callback_data=f'approve_{request_id}')
        reject_button = types.InlineKeyboardButton('‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data=f'reject_{request_id}')
        markup.add(approve_button, reject_button)

        bot.edit_message_reply_markup(config.ADMIN_CHAT_ID, request_message.message_id, reply_markup=markup)

        if file_path:
            with open(file_path, 'rb') as file_to_send:
                if message.content_type == 'photo':
                    bot.send_photo(config.ADMIN_CHAT_ID, photo=file_to_send)
                elif message.content_type == 'document':
                    bot.send_document(config.ADMIN_CHAT_ID, document=file_to_send)

        bot.send_message(message.chat.id, f"üì© **–í–∞—à –∑–∞–ø–∏—Ç ‚Ññ{request_number}: {amount} {currency}. –ó–∞–ø–∏—Ç –ø—Ä–∏–π–Ω—è—Ç–∏–π –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.**", parse_mode='Markdown')
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å—Ç–≤–æ—Ä–∏–≤ –∑–∞–ø–∏—Ç ‚Ññ{request_number} –Ω–∞ —Å—É–º—É {amount} {currency} –∑ —Ñ–∞–π–ª–æ–º")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ùóÔ∏è **–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∞–±–æ –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫.**")
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ —Ñ–∞–π–ª—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {message.from_user.id}: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith(('approve_', 'reject_')))
def process_approval(call):
    action, request_id = call.data.split('_')
    request_id = int(request_id)

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_id = call.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    admin_name = config.ADMIN_NAMES.get(admin_id, f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {admin_id}")

    status = '–ü–æ–≥–æ–¥–∂–µ–Ω–æ' if action == 'approve' else '–í—ñ–¥—Ö–∏–ª–µ–Ω–æ'
    database.update_request_status(request_id, status)

    request_info = database.get_request_info(request_id)
    user_id = request_info['user_id']
    request_number = request_info['request_number']

    bot.send_message(user_id, f"–í–∞—à –∑–∞–ø–∏—Ç ‚Ññ{request_number} –±—É–ª–æ {status.lower()}.")
    bot.edit_message_text(
        f"–ó–∞–ø–∏—Ç ‚Ññ{request_number} –≤—ñ–¥ {request_info['name']} –±—É–ª–æ {status.lower()}.",
        config.ADMIN_CHAT_ID,
        message_id=call.message.message_id
    )

    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    logging.info(f"–ó–∞–ø–∏—Ç ‚Ññ{request_number} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –±—É–ª–æ {status.lower()} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    if message.from_user.id in config.ADMIN_NAMES:
        total_requests = database.get_total_requests()
        approved_requests = database.get_approved_requests()
        rejected_requests = database.get_rejected_requests()
        amount_by_currency = database.get_total_amount_by_currency()  

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Å—É–º–º–æ–π –ø–æ –≤–∞–ª—é—Ç–∞–º
        currency_stats = ""
        for currency, total_amount in amount_by_currency.items():
            currency_stats += f"{currency}: {total_amount}\n"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.send_message(message.chat.id, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤:\n"
                                          f"–ó–∞–≥–∞–ª–æ–º –∑–∞–ø–∏—Ç—ñ–≤: {total_requests}\n"
                                          f"–ü–æ–≥–æ–¥–∂–µ–Ω–æ: {approved_requests}\n"
                                          f"–í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {rejected_requests}\n"
                                          f"–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –∑–∞–ø–∏—Ç—ñ–≤ –ø–æ –≤–∞–ª—é—Ç–∞–º:\n{currency_stats}")
        logging.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –ø—Ä–∞–≤")

@bot.callback_query_handler(func=lambda call: call.data == 'check_status')
def check_status(call):
    user_id = call.from_user.id
    active_requests = database.get_active_requests(user_id)

    if active_requests:
        messages = []
        for req in active_requests:
            messages.append(f"–ó–∞–ø–∏—Ç ‚Ññ{req['request_number']}: {req['amount']} {req['currency']}\n–°—Ç–∞—Ç—É—Å: {req['status']}")
        bot.send_message(call.message.chat.id, "\n\n".join(messages))
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")
    else:
        bot.send_message(call.message.chat.id, "–£ –≤–∞—Å –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤.")
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤")

if __name__ == "__main__":
    run_scheduler()
    bot.polling(none_stop=True)
