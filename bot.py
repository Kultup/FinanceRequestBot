import telebot
from telebot import types
import config
import database
import os
import logging
from cachetools import TTLCache
from threading import Thread
import schedule
import time

logging.basicConfig(filename="bot.log", 
                    level=logging.INFO, 
                    format="%(asctime)s - %(levelname)s - %(message)s", 
                    encoding='utf-8')

bot = telebot.TeleBot(config.TOKEN)
database.create_tables()

UPLOAD_FOLDER = config.UPLOAD_FOLDER
if not os.path.exists(UPLOAD_FOLDER):
    os.makedirs(UPLOAD_FOLDER)

user_cache = TTLCache(maxsize=1000, ttl=600)

@bot.message_handler(commands=['start'])
def start_registration(message):
    user_id = message.from_user.id
    if user_id in user_cache or database.is_user_registered(user_id):
        user_cache[user_id] = True  
        send_main_menu(message.chat.id)
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π, –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")
    else:
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton('üÜï –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è', callback_data='register')
        markup.add(button)
        bot.send_message(message.chat.id, "üë§ **–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó**", reply_markup=markup, parse_mode='Markdown')
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –æ—Ç—Ä–∏–º–∞–≤ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó")

def send_active_requests_reminder():
    active_requests = database.get_all_active_requests()
    if active_requests:
        messages = [
            f"üìå **–ó–∞–ø–∏—Ç ‚Ññ{req['request_number']}**\n"
            f"üë§ **–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á:** {req['name']} (–¢–µ–ª–µ—Ñ–æ–Ω: {req['phone']})\n"
            f"üí∞ **–°—É–º–∞:** {req['amount']}\n"
            f"üñã **–ö–æ–º–µ–Ω—Ç–∞—Ä:** {req['comment']}\n"
            f"üìé **–§–∞–π–ª:** {'–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ' if req['file_path'] else '–§–∞–π–ª –Ω–µ –¥–æ–¥–∞–Ω–æ.'}\n"
            f"üìÖ **–°—Ç–∞—Ç—É—Å:** {req['status']}"
            for req in active_requests
        ]
        bot.send_message(config.ADMIN_CHAT_ID, "üîî **–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞—è–≤–∫–∏**:\n\n" + "\n\n".join(messages), parse_mode='Markdown')
        logging.info("–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—ñ –∑–∞—è–≤–∫–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")

def schedule_reminders():
    weekdays = ["monday", "tuesday", "wednesday", "thursday", "friday"]
    for day in weekdays:
        for hour in range(10, 17):
            getattr(schedule.every(), day).at(f"{hour}:00").do(send_active_requests_reminder)
    while True:
        schedule.run_pending()
        time.sleep(1)

def run_scheduler():
    scheduler_thread = Thread(target=schedule_reminders)
    scheduler_thread.start()
    logging.info("–ó–∞–ø—É—â–µ–Ω–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å")

@bot.callback_query_handler(func=lambda call: call.data == 'make_request')
def handle_make_request(call):
    user_id = call.from_user.id
    bot.send_message(call.message.chat.id, "üí∞ **–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É:**", parse_mode='Markdown')
    bot.register_next_step_handler(call.message, process_amount)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É '–ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç'")

@bot.callback_query_handler(func=lambda call: call.data == 'register')
def process_registration(call):
    user_id = call.from_user.id
    if user_id in user_cache or database.is_user_registered(user_id):
        user_cache[user_id] = True
        bot.send_message(call.message.chat.id, "‚úÖ **–í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ!**", parse_mode='Markdown')
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π")
    else:
        bot.send_message(call.from_user.id, "‚úèÔ∏è **–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:**", parse_mode='Markdown')
        bot.register_next_step_handler(call.message, get_name)
        logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –ø–æ—á–∞–≤ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é")

def get_name(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(message.chat.id, "üì± **–í–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:**", parse_mode='Markdown')
    bot.register_next_step_handler(message, get_phone, name)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ —ñ–º'—è: {name}")

def get_phone(message, name):
    phone = message.text
    bot.send_message(message.chat.id, "üèô **–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:**", parse_mode='Markdown')
    bot.register_next_step_handler(message, get_city, name, phone)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω: {phone}")

def get_city(message, name, phone):
    city = message.text
    user_id = message.from_user.id
    database.add_user(user_id, name, phone, city)
    user_cache[user_id] = True
    bot.send_message(message.chat.id, "üéâ **–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ!**", parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π. –ú—ñ—Å—Ç–æ: {city}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}")
    send_main_menu(message.chat.id)

def send_main_menu(chat_id):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìù –ó—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç', callback_data='make_request'))
    bot.send_message(chat_id, "üîî **–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –æ–ø—Ü—ñ–π:**", reply_markup=markup, parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {chat_id} –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é")

@bot.message_handler(commands=['export_requests'])
def export_requests_command(message):
    user_id = message.from_user.id
    if user_id in config.ADMIN_NAMES:
        file_path = database.export_requests_to_excel()
        with open(file_path, 'rb') as file:
            bot.send_document(user_id, file)
        logging.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞–≤ –∑–∞–ø–∏—Ç–∏ –≤ Excel")
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É –∑–∞–ø–∏—Ç—ñ–≤.")
        logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–º–∞–≥–∞–≤—Å—è –µ–∫—Å–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∏ –±–µ–∑ –ø—Ä–∞–≤")

@bot.message_handler(commands=['import_requests'])
def import_requests_command(message):
    user_id = message.from_user.id
    if user_id in config.ADMIN_NAMES:
        bot.send_message(user_id, "üóÇÔ∏è –§—É–Ω–∫—Ü—ñ—è —ñ–º–ø–æ—Ä—Ç—É –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞–ø—É—â–µ–Ω–∞.")
        logging.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –≤–∏–∫–æ–Ω–∞–≤ —ñ–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Ç—ñ–≤")
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —ñ–º–ø–æ—Ä—Ç—É –∑–∞–ø–∏—Ç—ñ–≤.")
        logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –Ω–∞–º–∞–≥–∞–≤—Å—è –≤–∏–∫–æ–Ω–∞—Ç–∏ —ñ–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Ç—ñ–≤ –±–µ–∑ –ø—Ä–∞–≤")

def process_amount(message):
    amount = message.text
    if not amount.isdigit():
        bot.send_message(message.chat.id, "‚ùóÔ∏è **–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ –¥–ª—è —Å—É–º–∏.**", parse_mode='Markdown')
        logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É: {amount}")
        bot.register_next_step_handler(message, process_amount)
        return
    bot.send_message(message.chat.id, "üñã **–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–µ–Ω—Ç–∞—Ä:**", parse_mode='Markdown')
    bot.register_next_step_handler(message, process_comment, amount)
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –≤–≤—ñ–≤ —Å—É–º—É: {amount}")

def process_comment(message, amount):
    comment = message.text
    markup = types.InlineKeyboardMarkup()
    skip_button = types.InlineKeyboardButton('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏', callback_data=f'skip_file|{amount}|{comment}')
    markup.add(skip_button)
    bot.send_message(message.chat.id, "üìé **–¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ –∞–±–æ PDF-—Ñ–∞–π–ª. –Ø–∫—â–æ —Ñ–∞–π–ª –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –ø—Ä–æ–ø—É—Å—Ç—ñ—Ç—å —Ü–µ–π –∫—Ä–æ–∫.**", reply_markup=markup, parse_mode='Markdown')
    logging.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –¥–æ–¥–∞–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä: {comment}")
    bot.register_next_step_handler(message, process_file, amount, comment)

@bot.callback_query_handler(func=lambda call: call.data.startswith('skip_file'))
def skip_file(call):
    _, amount, comment = call.data.split('|')
    user_id = call.from_user.id
    request_id, request_number = database.add_request(user_id, amount, comment, None)
    notify_admin_about_request(request_id, request_number, amount, comment, user_id)
    bot.send_message(call.message.chat.id, f"üì© **–í–∞—à –∑–∞–ø–∏—Ç ‚Ññ{request_number}: {amount} –ø—Ä–∏–π–Ω—è—Ç–∏–π –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.**", parse_mode='Markdown')
    logging.info(f"–ó–∞–ø–∏—Ç ‚Ññ{request_number} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ–¥–∞–Ω–æ –±–µ–∑ —Ñ–∞–π–ª—É")

def process_file(message, amount, comment):
    try:
        file_path = None
        user_id = message.from_user.id
        if message.content_type == 'photo':
            file_info = bot.get_file(message.photo[-1].file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            file_path = os.path.join(UPLOAD_FOLDER, file_info.file_unique_id + '.jpg')
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)
        elif message.content_type == 'document':
            file_extension = os.path.splitext(message.document.file_name)[-1].lower()
            supported_formats = ['.pdf', '.jpg', '.jpeg', '.png', '.txt', '.doc', '.docx', '.xls', '.xlsx']
            if file_extension not in supported_formats:
                bot.send_message(message.chat.id, "‚ùóÔ∏è **–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: PDF, JPG, JPEG, PNG, TXT, DOC, DOCX, XLS, XLSX.**")
                logging.warning(f"–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ {file_extension} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                return
            file_info = bot.get_file(message.document.file_id)
            downloaded_file = bot.download_file(file_info.file_path)
            file_path = os.path.join(UPLOAD_FOLDER, message.document.file_name)
            with open(file_path, 'wb') as new_file:
                new_file.write(downloaded_file)

        request_id, request_number = database.add_request(user_id, amount, comment, file_path)
        notify_admin_about_request(request_id, request_number, amount, comment, user_id, file_path)
        bot.send_message(message.chat.id, f"üì© **–í–∞—à –∑–∞–ø–∏—Ç ‚Ññ{request_number}: {amount} –ø—Ä–∏–π–Ω—è—Ç–∏–π –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.**", parse_mode='Markdown')
        logging.info(f"–ó–∞–ø–∏—Ç ‚Ññ{request_number} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –¥–æ–¥–∞–Ω–æ –∑ —Ñ–∞–π–ª–æ–º {file_path if file_path else '–±–µ–∑ —Ñ–∞–π–ª—É'}")

    except Exception as e:
        error_message = f"‚ùóÔ∏è **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞. –ü—Ä–∏—á–∏–Ω–∞: {str(e)}.** –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª."
        bot.send_message(message.chat.id, error_message)
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {str(e)}")

def notify_admin_about_request(request_id, request_number, amount, comment, user_id, file_path=None):
    user_info = database.get_user_info(user_id)
    request_text = (f"üÜï **–ó–∞–ø–∏—Ç ‚Ññ{request_number}** –≤—ñ–¥ {user_info['name']}, {user_info['city']} (üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_info['phone']}):\n"
                    f"üí∞ **–°—É–º–∞:** {amount}\n"
                    f"üñã **–ö–æ–º–µ–Ω—Ç–∞—Ä:** {comment}\n"
                    f"üìé **–§–∞–π–ª:** {'–ü—Ä–∏–∫—Ä—ñ–ø–ª–µ–Ω–æ' if file_path else '–§–∞–π–ª –Ω–µ –¥–æ–¥–∞–Ω–æ.'}")
    request_message = bot.send_message(config.ADMIN_CHAT_ID, request_text, parse_mode='Markdown')

    if file_path:
        with open(file_path, 'rb') as file:
            bot.send_document(config.ADMIN_CHAT_ID, file) if file_path.endswith(('.pdf', '.txt', '.doc', '.docx', '.xls', '.xlsx')) else bot.send_photo(config.ADMIN_CHAT_ID, file)

    markup = types.InlineKeyboardMarkup()
    approve_button = types.InlineKeyboardButton('‚úÖ –ü–æ–≥–æ–¥–∏—Ç–∏ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è', callback_data=f'approve_without_comment_{request_id}')
    approve_with_comment_button = types.InlineKeyboardButton('‚úèÔ∏è –ü–æ–≥–æ–¥–∏—Ç–∏ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º', callback_data=f'approve_with_comment_{request_id}')
    reject_button = types.InlineKeyboardButton('‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏', callback_data=f'reject_{request_id}')
    markup.add(approve_button, approve_with_comment_button, reject_button)
    bot.edit_message_reply_markup(config.ADMIN_CHAT_ID, request_message.message_id, reply_markup=markup)
    logging.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –∑–∞–ø–∏—Ç ‚Ññ{request_number} –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É")

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_without_comment_'))
def approve_without_comment(call):
    request_id = int(call.data.split('_')[-1])
    admin_name = config.ADMIN_NAMES.get(call.from_user.id, "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    database.update_request_status(request_id, "–ü–æ–≥–æ–¥–∂–µ–Ω–æ")
    request_info = database.get_request_info(request_id)
    bot.send_message(request_info['user_id'], f"–í–∞—à –∑–∞–ø–∏—Ç ‚Ññ{request_info['request_number']} –±—É–ª–æ –ø–æ–≥–æ–¥–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name} –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è.")
    bot.edit_message_text(f"–ó–∞–ø–∏—Ç ‚Ññ{request_id} –ø–æ–≥–æ–¥–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}.", config.ADMIN_CHAT_ID, call.message.message_id)
    logging.info(f"–ó–∞–ø–∏—Ç ‚Ññ{request_id} –ø–æ–≥–æ–¥–∂–µ–Ω–æ –±–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è")

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve_with_comment_'))
def approve_with_comment(call):
    request_id = int(call.data.split('_')[-1])
    bot.send_message(call.message.chat.id, "‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à –∫–æ–º–µ–Ω—Ç–∞—Ä –¥–æ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è:", parse_mode='Markdown')
    bot.register_next_step_handler(call.message, process_approve_comment, request_id, call.message.message_id)
    logging.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –æ–±—Ä–∞–≤ –ø–æ–≥–æ–¥–∂–µ–Ω–Ω—è –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –¥–ª—è –∑–∞–ø–∏—Ç—É ‚Ññ{request_id}")

def process_approve_comment(message, request_id, admin_message_id):
    admin_comment = message.text
    request_info = database.get_request_info(request_id)
    database.update_request_status(request_id, "–ü–æ–≥–æ–¥–∂–µ–Ω–æ", admin_comment)

    try:
        bot.edit_message_text(
            f"–ó–∞–ø–∏—Ç ‚Ññ{request_info['request_number']} –ø–æ–≥–æ–¥–∂–µ–Ω–æ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_comment}",
            chat_id=config.ADMIN_CHAT_ID,
            message_id=admin_message_id,
            parse_mode='Markdown'
        )
    except telebot.apihelper.ApiTelegramException as e:
        logging.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏: {e}")

    bot.send_message(
        request_info['user_id'],
        f"–í–∞—à –∑–∞–ø–∏—Ç ‚Ññ{request_info['request_number']} –ø–æ–≥–æ–¥–∂–µ–Ω–æ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {admin_comment}"
    )
    logging.info(f"–ó–∞–ø–∏—Ç ‚Ññ{request_id} –ø–æ–≥–æ–¥–∂–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º: {admin_comment}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject_'))
def reject_request(call):
    request_id = int(call.data.split('_')[-1])
    admin_name = config.ADMIN_NAMES.get(call.from_user.id, "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä")
    
    database.update_request_status(request_id, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ")
    request_info = database.get_request_info(request_id)
    bot.send_message(request_info['user_id'], f"–í–∞—à –∑–∞–ø–∏—Ç ‚Ññ{request_info['request_number']} –±—É–ª–æ –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}.")
    bot.edit_message_text(f"–ó–∞–ø–∏—Ç ‚Ññ{request_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}.", config.ADMIN_CHAT_ID, call.message.message_id)
    logging.info(f"–ó–∞–ø–∏—Ç ‚Ññ{request_id} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {admin_name}")

@bot.message_handler(commands=['stats'])
def send_stats(message):
    if message.from_user.id in config.ADMIN_NAMES:
        total_requests = database.get_total_requests()
        approved_requests = database.get_approved_requests()
        rejected_requests = database.get_rejected_requests()

        bot.send_message(
            message.chat.id,
            f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Ç—ñ–≤:\n–ó–∞–≥–∞–ª–æ–º –∑–∞–ø–∏—Ç—ñ–≤: {total_requests}\n–ü–æ–≥–æ–¥–∂–µ–Ω–æ: {approved_requests}\n–í—ñ–¥—Ö–∏–ª–µ–Ω–æ: {rejected_requests}",
            parse_mode='Markdown'
        )
        logging.info(f"–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    else:
        bot.send_message(message.chat.id, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        logging.warning(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {message.from_user.id} –Ω–∞–º–∞–≥–∞–≤—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑ –ø—Ä–∞–≤")

if __name__ == "__main__":
    run_scheduler()
    bot.polling(none_stop=True)
